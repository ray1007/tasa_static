{"version":3,"sources":["Header.js","SourceLangPanel.js","TargetLangPanel.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDialogOpen","bind","assertThisInitialized","handleDialogClose","state","dialogOpen","setState","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","className","variant","color","Button_default","onClick","Dialog_default","open","onClose","aria-labelledby","DialogTitle_default","PureComponent","SourceLangPanel","keyHandling","e","newPos","code","currentPos","headInds","has","moveSrcPos","tokens","length","handleEnterEditMode","window","removeEventListener","editMode","tokenJoinedText","join","handleLeaveEditMode","addEventListener","newTokens","document","getElementById","value","split","changeTokens","renderEditMode","renderNormalMode","_this2","Paper_default","elevation","Grid_default","container","spacing","item","xs","map","token","idx","Chip_default","label","style","fontWeight","backgroundColor","colors","enableRetokenize","Button_Button_default","id","component","TextField_default","multiline","fullWidth","defaultValue","margin","TargetLangPanel","toggleSelectionAt","forceUpdate","_this3","Grid_Grid_default","selection","handleClick","TextField_TextField_default","App","handleNextData","handlePrevData","handleSrcPosChange","handleToggleSelectionAt","handleChangeSrcTokens","handleChangeTarTokens","handleSubmit","enComm","zhComm","console","log","dataIdx","totalData","srcTokens","tarTokens","selections","srcPos","currentSelection","zhEnableRetokenize","enEnableRetokenize","srcColors","tarColors","srcHeadInds","tarHeadInds","n","querySelector","display","el","comm","Communication","initFromTJSONProtocolObject","zh_comm","tokenList","sectionList","sentenceList","tokenization","tar_tokens","text","en_comm","src_tokens","aln_comm","i","j","zh_enable_retokenize","en_enable_retokenize","src_spans","tar_spans","hue","pos","begin","end","push","concat","src_head_inds","tar_head_inds","Set","fetchCommunicationAndUpdateState","file_num","enFilename","zhFilename","axios","get","then","res","data","v","JSON","stringify","Tokenization","kind","TokenizationKind","TOKEN_LIST","metadata","AnnotationMetadata","timestamp","Math","floor","Date","now","tool","TokenList","uuid","concrete","util","generateUUID","string","charPos","tokenIdx","Token","textSpan","TextSpan","start","tokenIndex","toTJSONProtocolString","src_Header_0","src_SourceLangPanel","src_TargetLangPanel","type","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a594db1.chunk.js","sourcesContent":["import React, {PureComponent} from \"react\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport \"./Header.css\"\r\n\r\nclass Header extends PureComponent {\r\n  constructor(props){\r\n    super(props);\r\n    this.handleDialogOpen = this.handleDialogOpen.bind(this)\r\n    this.handleDialogClose = this.handleDialogClose.bind(this)\r\n\r\n    this.state = {\r\n      dialogOpen: false,\r\n    };\r\n  }\r\n\r\n\r\n  handleDialogOpen() {\r\n    this.setState({dialogOpen: true});\r\n  }\r\n\r\n  handleDialogClose() {\r\n    this.setState({dialogOpen: false});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography className='appbarSpace' variant=\"h6\" color=\"inherit\">\r\n              Annotator App\r\n            </Typography>\r\n\r\n            <Button color=\"inherit\" onClick={this.handleDialogOpen}>\r\n              Show Instructions\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <Dialog open={this.state.dialogOpen} onClose={this.handleDialogClose} aria-labelledby=\"simple-dialog-title\">\r\n          <DialogTitle>Instructions</DialogTitle>\r\n          <Typography className='dialogText'>\r\n            Use key A/D or left/right to move along source sentence. <br/>\r\n            Use mouse click to toggle selection of each target sentence token. <br/>\r\n            Click the \"Re-tokenize\" button to modify tokenization. A textfield will show up and each individual token should be put in a line.\r\n          </Typography>\r\n        </Dialog>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Header","import React, {PureComponent} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport \"./Panel.css\"\r\nimport Button from \"@material-ui/core/Button/Button\";\r\n\r\nclass SourceLangPanel extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      editMode: false,\r\n      tokenJoinedText: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Add Event Listener on component mount\r\n    window.addEventListener(\"keyup\", this.keyHandling);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Remove event listener on compenent unmount\r\n    window.removeEventListener(\"keyup\", this.keyHandling);\r\n  }\r\n\r\n  keyHandling = (e) => {\r\n    let newPos = -1;\r\n    // Handle event\r\n    switch(e.code){\r\n      case \"KeyA\":\r\n      case \"ArrowLeft\":\r\n        newPos = this.props.currentPos - 1;\r\n        while (newPos >= 0 && !this.props.headInds.has(newPos)){\r\n          newPos -= 1;\r\n        }\r\n        this.props.moveSrcPos(newPos);\r\n        break;\r\n\r\n      case \"KeyD\":\r\n      case \"ArrowRight\":\r\n        newPos = this.props.currentPos + 1;\r\n        while (newPos < this.props.tokens.length && !this.props.headInds.has(newPos)){\r\n          newPos += 1;\r\n        }\r\n        this.props.moveSrcPos(newPos);\r\n    }\r\n  };\r\n\r\n  handleEnterEditMode = () => {\r\n    // Remove event listener on compenent unmount\r\n    window.removeEventListener(\"keyup\", this.keyHandling);\r\n    this.setState({\r\n      editMode: true,\r\n      tokenJoinedText: this.props.tokens.join('\\n')\r\n    });\r\n  };\r\n\r\n  handleLeaveEditMode = () => {\r\n    // Add Event Listener on component mount\r\n    window.addEventListener(\"keyup\", this.keyHandling);\r\n    this.setState({editMode: false});\r\n    let newTokens = document.getElementById(\"tokensTextField\").value.split(\"\\n\");\r\n    this.props.changeTokens(newTokens);\r\n  };\r\n\r\n\r\n  render() {\r\n    if (this.state.editMode)\r\n      return this.renderEditMode();\r\n    else\r\n      return this.renderNormalMode();\r\n  }\r\n\r\n\r\n  renderNormalMode(){\r\n    return (\r\n      <Paper className=\"panel\" elevation={4}>\r\n        <Grid container spacing={16}>\r\n          <Grid item xs={11}>\r\n            {this.props.tokens.map((token, idx) =>\r\n              (this.props.headInds.has(idx))?\r\n                (idx === this.props.currentPos)?\r\n                  <Chip className=\"token\" label={token} color=\"primary\"/>:\r\n                  <Chip className=\"token\" label={token} style={{fontWeight: 'bold', backgroundColor: this.props.colors[idx]}}/>\r\n                : <Chip className=\"token\" label={token} style={{color: '#808080', backgroundColor: this.props.colors[idx]}}/>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            {this.props.enableRetokenize?\r\n              <Button variant=\"contained\" color=\"primary\"\r\n                      onClick={this.handleEnterEditMode}>\r\n                Re-tokenize\r\n              </Button>:\r\n              null\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <div id={\"test\"} />\r\n      </Paper>\r\n    )\r\n  }\r\n\r\n  renderEditMode(){\r\n    return (\r\n      <Paper className=\"panel\" elevation={4}>\r\n        <Grid container spacing={16}>\r\n          <Grid item xs={11}>\r\n            <Typography variant=\"headline\" component=\"h3\">\r\n              Source Language\r\n            </Typography>\r\n            <Typography component=\"p\">\r\n              Edit source sentence tokenization. Each line represents a single token.\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <Button variant=\"contained\" color=\"primary\"\r\n                    onClick={this.handleLeaveEditMode}>\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <div className=\"divider\"/>\r\n\r\n        <TextField\r\n          id=\"tokensTextField\"\r\n          label=\"Edit tokens\" multiline fullWidth\r\n          defaultValue={this.state.tokenJoinedText}\r\n          margin=\"normal\" variant=\"outlined\" />\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\nSourceLangPanel.propTypes = {\r\n  tokens: PropTypes.arrayOf(PropTypes.string),\r\n  currentPos: PropTypes.number,\r\n  moveSrcPos: PropTypes.func,\r\n  changeTokens: PropTypes.func,\r\n};\r\nexport default SourceLangPanel","import React, {PureComponent} from \"react\";\r\n\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport \"./Panel.css\"\r\nimport {get_tar_token_list} from \"./Mock\"\r\nimport PropTypes from \"prop-types\";\r\nimport SourceLangPanel from \"./SourceLangPanel\";\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport TextField from \"@material-ui/core/TextField/TextField\";\r\n\r\nclass TargetLangPanel extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      editMode: false,\r\n      tokenJoinedText: \"\"\r\n    };\r\n  }\r\n\r\n  handleEnterEditMode = () => {\r\n    // Remove event listener on compenent unmount\r\n    this.setState({\r\n      editMode: true,\r\n      tokenJoinedText: this.props.tokens.join('\\n')\r\n    })\r\n  };\r\n\r\n  handleLeaveEditMode = () => {\r\n    // Add Event Listener on component mount\r\n    this.setState({editMode: false});\r\n    let newTokens = document.getElementById(\"tokensTextField\").value.split(\"\\n\");\r\n    this.props.changeTokens(newTokens)\r\n  };\r\n\r\n  handleClick(idx) { return () => {\r\n    this.props.toggleSelectionAt(idx);\r\n    this.forceUpdate()\r\n  }}\r\n\r\n  render() {\r\n    if (this.state.editMode)\r\n      return this.renderEditMode();\r\n    else\r\n      return this.renderNormalMode()\r\n  }\r\n\r\n  renderNormalMode() {\r\n    return (\r\n      <Paper className=\"panel\" elevation={4}>\r\n        <Grid container spacing={16}>\r\n          <Grid item xs={11}>\r\n            {this.props.tokens.map((token, idx) =>\r\n              (this.props.headInds.has(idx))?\r\n                (this.props.selection[idx])?\r\n                  <Chip className=\"token\" label={token} onClick={this.handleClick(idx)} color=\"primary\"/>:\r\n                  <Chip className=\"token\" label={token}\r\n                        style={{fontWeight: 'bold', backgroundColor: this.props.colors[idx]}} onClick={this.handleClick(idx)}/>\r\n                : <Chip className=\"token\" label={token}\r\n                        style={{color: '#808080', backgroundColor: this.props.colors[idx]}}/>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            {this.props.enableRetokenize?\r\n              <Button variant=\"contained\" color=\"primary\"\r\n                      onClick={this.handleEnterEditMode}>\r\n                Re-tokenize\r\n              </Button>:\r\n              null\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    )\r\n  }\r\n\r\n  renderEditMode(){\r\n    return (\r\n      <Paper className=\"panel\" elevation={4}>\r\n        <Grid container spacing={16}>\r\n          <Grid item xs={11}>\r\n            <Typography variant=\"headline\" component=\"h3\">\r\n              Source Language\r\n            </Typography>\r\n            <Typography component=\"p\">\r\n              Edit source sentence tokenization. Each line represents a single token.\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <Button variant=\"contained\" color=\"primary\"\r\n                    onClick={this.handleLeaveEditMode}>\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <div className=\"divider\"/>\r\n\r\n        <TextField\r\n          id=\"tokensTextField\"\r\n          label=\"Edit tokens\" multiline fullWidth\r\n          defaultValue={this.state.tokenJoinedText}\r\n          margin=\"normal\" variant=\"outlined\" />\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\nTargetLangPanel.propTypes = {\r\n  tokens: PropTypes.arrayOf(PropTypes.string),\r\n  selection: PropTypes.array,\r\n  toggleSelectionAt: PropTypes.func\r\n};\r\nexport default TargetLangPanel","import axios from \"axios\";\nimport React, { Component } from 'react';\n\nimport './App.css';\nimport Header from './Header'\nimport SourceLangPanel from './SourceLangPanel'\nimport TargetLangPanel from './TargetLangPanel'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleNextData = this.handleNextData.bind(this);\n    this.handlePrevData = this.handlePrevData.bind(this);\n    this.handleSrcPosChange = this.handleSrcPosChange.bind(this);\n    this.handleToggleSelectionAt = this.handleToggleSelectionAt.bind(this);\n    this.handleChangeSrcTokens = this.handleChangeSrcTokens.bind(this);\n    this.handleChangeTarTokens = this.handleChangeTarTokens.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.enComm = {};\n    this.zhComm = {};\n    console.log(\"TEST TEST TEST \");\n    this.state = {\n      dataIdx: 2,\n      totalData:20,\n      srcTokens: [],\n      tarTokens: [],\n      selections: [[]], // List<List<bool>>\n      srcPos: 0,\n      currentSelection: [],\n\n      // for re-tokenization control.\n      zhEnableRetokenize: true,\n      enEnableRetokenize: true,\n\n      // for span hightlight and bolded head tokens.\n      srcColors: [], // List<string>\n      tarColors: [], // List<string>\n      srcHeadInds: [], // List<int>\n      tarHeadInds: [], // List<int>\n    };\n  }\n\n  componentDidMount() {\n    // mock data\n    //const sent_idx = 0\n    //this.fetchCommunicationAndUpdateState(1)\n  }\n\n  componentWillMount() {\n    // mock data\n    const sent_idx = 0;\n\n    var n = document.querySelector(\"#enCommInput\");\n    if (n) { n.style.display = 'none'; }\n    n = document.querySelector(\"#zhCommInput\");\n    if (n) { n.style.display = 'none'; }\n    n = document.querySelector(\"#alignmentInput\");\n    if (n) { n.style.display = 'none'; }\n\n    var el = document.querySelector(\"#hiddenSubmit\");\n    if (el) {\n      // if el is not null, than this code is loaded by Turkle.\n      el.style.display = 'none';\n      //this.fetchCommunicationAndUpdateState(this.state.dataIdx);\n\n      // target language (Chinese)\n      var comm = new window.Communication();\n      comm.initFromTJSONProtocolObject(window.zh_comm);\n      var tokenList = comm.sectionList[0].sentenceList[0].tokenization.tokenList.tokenList;\n      const tar_tokens = tokenList.map((token) => token.text);\n\n      this.zhComm = comm;\n      this.setState({\n        tarTokens: tar_tokens,\n      });\n\n      // source language (English)\n      comm = new window.Communication();\n      comm.initFromTJSONProtocolObject(window.en_comm);\n      tokenList = comm.sectionList[0].sentenceList[0].tokenization.tokenList.tokenList;\n      const src_tokens = tokenList.map((token) => token.text);\n    \n\n      //console.log(window.aln_comm);\n      //var selections = src_tokens.map((token) =>\n      //  tar_tokens.map((token) => false)\n      //);\n      //console.log(selections);\n      var selections = window.aln_comm;\n      for (var i = 0; i < selections.length; i++){\n        for (var j = 0; j < selections[i].length; j++){\n            selections[i][j] = selections[i][j] == \"true\";\n        }\n      }\n\n      // read re-tokenization control from turkle.\n      var zh_enable_retokenize = window.zh_enable_retokenize === 1;\n      var en_enable_retokenize = window.en_enable_retokenize === 1;\n\n      // read spans from turkle.\n      console.log('spans', window.src_spans);\n      var src_spans = window.src_spans;\n      var tar_spans = window.tar_spans;\n\n      let hueIncr = 67;\n      let hue = hueIncr;\n\n      // generate src span colors.\n      let srcColors = [];\n      let pos = 0;\n      for (let i = 0; i < src_spans.length; i++) {\n        let begin = src_spans[i][0];\n        let end = src_spans[i][1];\n\n        for (let j = pos; j < begin; j++) {\n          srcColors.push('hsl(0,0%,87%)');\n        }\n        for (let j = begin; j < end; j++) {\n          srcColors.push(`hsl(${hue},50%,75%)`);\n        }\n\n        pos = end;\n        hue = (hue + hueIncr) % 360;\n      }\n      for (pos; pos < src_tokens.length; pos++) {\n        srcColors.push('hsl(0,0%,87%)');\n      }\n\n      // generate src span colors.\n      var tarColors = [];\n      pos = 0;\n      for (let i = 0; i < tar_spans.length; i++) {\n        let begin = tar_spans[i][0];\n        let end = tar_spans[i][1];\n\n        for (let j = pos; j < begin; j++) {\n          tarColors.push('hsl(0,0%,87%)');\n        }\n        for (let j = begin; j < end; j++) {\n          tarColors.push(`hsl(${hue},50%,75%)`);\n        }\n\n        pos = end;\n        hue = (hue + hueIncr) % 360;\n      }\n      for (pos; pos < tar_tokens.length; pos++) {\n        tarColors.push('hsl(0,0%,87%)');\n      }\n\n      // read head inds from turkle.\n      var src_head_inds = window.src_head_inds;\n      var tar_head_inds = window.tar_head_inds;\n\n      this.enComm = comm;\n      this.setState({\n        srcTokens: src_tokens,\n        selections: selections,\n        zhEnableRetokenize: zh_enable_retokenize,\n        enEnableRetokenize: en_enable_retokenize,\n        srcHeadInds: new Set(src_head_inds),\n        tarHeadInds: new Set(tar_head_inds),\n        srcColors: srcColors,\n        tarColors: tarColors\n      })\n\n    } else {\n      // this code is loaded independently\n      this.fetchCommunicationAndUpdateState(this.state.dataIdx)\n    }\n  }\n\n  // used to read Communication file on disk.\n  fetchCommunicationAndUpdateState(file_num){\n    let enFilename = `concrete_files/en.${file_num}.comm.json`;\n    let zhFilename = `concrete_files/zh.${file_num}.comm.json`;\n\n    axios.get(zhFilename)\n      .then(res => {\n        var comm = new window.Communication();\n        comm.initFromTJSONProtocolObject(res.data);\n        var tokenList = comm.sectionList[0].sentenceList[0].tokenization.tokenList.tokenList;\n        const tar_tokens = tokenList.map((token) => token.text);\n\n        this.zhComm = comm;\n        // update the state.\n        this.setState({\n          //zhComm: comm,\n          tarTokens: tar_tokens,\n          tarHeadInds: new Set(tokenList.map((token, idx) => idx))\n        });\n\n        return axios.get(enFilename)\n      })\n      .then(res => {\n        var comm = new window.Communication();\n        comm.initFromTJSONProtocolObject(res.data);\n        var tokenList = comm.sectionList[0].sentenceList[0].tokenization.tokenList.tokenList;\n        const src_tokens = tokenList.map((token) => token.text);\n        const tar_tokens = this.state.tarTokens;\n\n        var selections = src_tokens.map((token) =>\n          tar_tokens.map((token) => false)\n        );\n        var v = comm;\n        console.log(JSON.stringify(v));\n        this.enComm = comm;\n\n        // set different color to each token.\n        var srcColors = [];\n        var hueIncr = 67;\n        var hue = hueIncr;\n        for (var i = 0; i < src_tokens.length; i++) {\n          srcColors.push(`hsl(${hue},50%,85%)`);\n          hue = (hue + hueIncr) % 360;\n        }\n        var tarColors = [];\n        for (var i = 0; i < tar_tokens.length; i++) {\n          tarColors.push(`hsl(${hue},30%,85%)`);\n          hue = (hue + hueIncr) % 360;\n        }\n\n        this.setState({\n          //enComm: comm,\n          srcTokens: src_tokens,\n          srcHeadInds: new Set(tokenList.map((token, idx) => 1)),\n          selections: selections,\n          srcColors: srcColors,\n          tarColors: tarColors\n        })\n      })\n  }\n\n  handleSrcPosChange(newPos){\n    if (0 <= newPos && newPos < this.state.srcTokens.length){\n      this.setState({\n        srcPos: newPos,\n      })\n    }\n  }\n\n  handleToggleSelectionAt(idx){\n    let selections = this.state.selections;\n    let selection = selections[this.state.srcPos];\n\n    selection[idx] = (selection[idx] !== true);\n    selections[this.state.srcPos] = selection;\n\n    this.setState({\n      selections: selections,\n    })\n  }\n\n  handleChangeSrcTokens(newTokens){\n    // since the tokenizations changed, re-initialize selection.\n    // also update the Communication object for src lang.\n    var tokenization = new window.Tokenization();\n    tokenization.kind = window.TokenizationKind.TOKEN_LIST;\n    tokenization.metadata = new window.AnnotationMetadata();\n    tokenization.metadata.timestamp = Math.floor(Date.now()/1000);\n    tokenization.metadata.tool = 'annotation app with concrete.js';\n    tokenization.tokenList = new window.TokenList();\n    tokenization.tokenList.tokenList = [];\n    tokenization.uuid = window.concrete.util.generateUUID();\n\n    var string = '';\n    var charPos = 0;\n    for (var tokenIdx in newTokens) {\n      var token = new window.Token();\n      token.text = newTokens[tokenIdx];\n      string += newTokens[tokenIdx] + ' ';\n\n      var textSpan = new window.TextSpan();\n      textSpan.start = charPos;\n      textSpan.end = charPos + newTokens[tokenIdx].length;\n      token.textSpan = textSpan;\n      token.tokenIndex = tokenIdx;\n      tokenization.tokenList.tokenList.push(token);\n\n      charPos = textSpan.end + 1\n    }\n\n    this.enComm.sectionList[0].sentenceList[0].tokenization = tokenization;\n    this.enComm.text = string;\n    // update app states\n    var selections = newTokens.map((token) =>\n      this.state.tarTokens.map((token) => false)\n    );\n    this.setState({\n      srcTokens: newTokens,\n      selections: selections\n    })\n  }\n\n  handleChangeTarTokens(newTokens){\n    // since the tokenizations changed, re-initialize selection.\n    // also update the Communication object for src lang.\n    var tokenization = new window.Tokenization();\n    tokenization.kind = window.TokenizationKind.TOKEN_LIST;\n    tokenization.metadata = new window.AnnotationMetadata();\n    tokenization.metadata.timestamp = Math.floor(Date.now()/1000);\n    tokenization.metadata.tool = 'annotation app with concrete.js';\n    tokenization.tokenList = new window.TokenList();\n    tokenization.tokenList.tokenList = [];\n    tokenization.uuid = window.concrete.util.generateUUID();\n\n    var string = '';\n    var charPos = 0;\n    for (var tokenIdx in newTokens) {\n      var token = new window.Token();\n      token.text = newTokens[tokenIdx];\n      string += newTokens[tokenIdx] + ' ';\n\n      var textSpan = new window.TextSpan();\n      textSpan.start = charPos;\n      textSpan.end = charPos + newTokens[tokenIdx].length;\n      token.textSpan = textSpan;\n      token.tokenIndex = tokenIdx;\n      tokenization.tokenList.tokenList.push(token);\n\n      charPos = textSpan.end + 1\n    }\n\n    this.zhComm.sectionList[0].sentenceList[0].tokenization = tokenization;\n    this.zhComm.text = string;\n\n    // update app states\n    var selections = this.state.tarTokens.map((token) =>\n      newTokens.map((token) => false)\n    );\n    this.setState({\n      tarTokens: newTokens,\n      selections: selections\n    })\n  }\n\n  handlePrevData(){\n    // first save current data to backend, then query new data.\n    let dataIdx = this.state.dataIdx;\n    if (dataIdx > 1) {\n      this.setState({dataIdx: dataIdx-1});\n      this.fetchCommunicationAndUpdateState(dataIdx-1)\n    }\n  }\n\n  handleNextData(){\n    let dataIdx = this.state.dataIdx;\n    if (dataIdx < this.state.totalData) {\n      this.setState({dataIdx: dataIdx+1});\n      this.fetchCommunicationAndUpdateState(dataIdx+1)\n    }\n  }\n\n  handleSubmit(){\n    var n = document.querySelector(\"#enCommInput\");\n    if (n) {\n      n.value = this.enComm.toTJSONProtocolString();\n    }\n    n = document.querySelector(\"#zhCommInput\");\n    if (n) {\n      n.value = this.zhComm.toTJSONProtocolString();\n    }\n    n = document.querySelector(\"#alignmentInput\");\n    if (n) {\n      n.value = JSON.stringify(this.state.selections);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header/>\n        <SourceLangPanel\n          tokens={this.state.srcTokens} currentPos={this.state.srcPos}\n          headInds={this.state.srcHeadInds}\n          colors={this.state.srcColors}\n          enableRetokenize={this.state.enEnableRetokenize}\n          moveSrcPos={this.handleSrcPosChange}\n          changeTokens={this.handleChangeSrcTokens}/>\n        <TargetLangPanel\n          tokens={this.state.tarTokens}\n          headInds={this.state.tarHeadInds}\n          colors={this.state.tarColors}\n          selection={this.state.selections[this.state.srcPos]}\n          enableRetokenize={this.state.zhEnableRetokenize}\n          toggleSelectionAt={this.handleToggleSelectionAt}\n          changeTokens={this.handleChangeTarTokens} />\n\n        <input className=\"submit\" onClick={this.handleSubmit}\n               type=\"submit\" value=\"Submit\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}